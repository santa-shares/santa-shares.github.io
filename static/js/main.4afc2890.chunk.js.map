{"version":3,"sources":["components/leaderboard.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Leaderboard","users","class","scope","map","user","user_id","user_name","balance","NavBar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","state","fetch","then","res","json","data","sort","a","b","setState","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQA4BeA,EA1BK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACI,yBAAKC,MAAM,aACP,2CACA,2BAAOA,MAAM,qBACT,+BACI,4BACI,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UAGR,+BACIF,EAAMG,KAAI,SAACC,GAAD,OACX,4BACI,4BAAKA,EAAKC,SACV,4BAAKD,EAAKE,WACV,mCAAMF,EAAKG,iBCUnBC,EA3BA,WACX,OACI,yBAAKP,MAAM,+CACP,uBAAGA,MAAM,eAAeQ,KAAK,KAA7B,gBACA,4BAAQR,MAAM,iBAAiBS,KAAK,SAASC,cAAY,WACjDC,cAAY,aACZC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC/D,0BAAMd,MAAM,yBAGhB,yBAAKA,MAAM,2BAA2Be,GAAG,aACrC,wBAAIf,MAAM,sBACN,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,gBAEJ,wBAAIR,MAAM,YACN,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,UAEJ,wBAAIR,MAAM,YACN,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,mBCUTQ,G,uNAxBbC,MAAQ,CACN,MAAU,I,mFAGS,IAAD,OAClBC,MAAM,oDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJA,EAAKC,MAAK,SAASC,EAAGC,GAAK,OAAOD,EAAElB,QAAUmB,EAAEnB,WAChD,EAAKoB,SAAS,CAAE3B,MAAOuB,OAExBK,MAAMC,QAAQC,O,+BAIf,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAa9B,MAAO+B,KAAKb,MAAMlB,a,GAnBrBgC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.4afc2890.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Leaderboard = ({ users }) => {\r\n    return (\r\n        <div class=\"container\">\r\n            <h3>Leaderboard</h3>\r\n            <table class=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Cash</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                   {users.map((user) => (\r\n                   <tr>\r\n                       <td>{user.user_id}</td>\r\n                       <td>{user.user_name}</td>\r\n                       <td>Â£{user.balance}</td>\r\n                   </tr>\r\n               ))} \r\n               </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;","import React from 'react'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <a class=\"navbar-brand\" href=\"#\">Santa-Shares</a>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#navbarNav\"\r\n                    aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul class=\"navbar-nav mr-auto\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Leaderboard</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Stock</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Help/About</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react';\nimport Leaderboard from './components/leaderboard';\nimport NavBar from './components/navbar';\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    \"users\" : []\n  }\n\n  componentDidMount() {\n    fetch('https://santa-shares.azurewebsites.net/api/users')\n    .then(res => res.json())\n    .then(data => {\n      data.sort(function(a, b) { return a.balance - b.balance; })\n      this.setState({ users: data })\n    })\n    .catch(console.log)\n  }\n\n  render () {\n    return (\n      <div>\n        <NavBar />\n        <Leaderboard users={this.state.users} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}