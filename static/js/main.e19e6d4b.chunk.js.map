{"version":3,"sources":["components/stock.js","components/leaderboard.js","App.js","serviceWorker.js","index.js"],"names":["Stock","items","class","scope","style","textAlign","map","item","item_id","item_name","price","toFixed","amount","Leaderboard","users","user","user_id","user_name","balance","App","state","fetch","then","res","json","data","sort","a","b","setState","catch","console","log","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","path","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TA8BeA,EA5BD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,yBAAKC,MAAM,aACP,6CACA,2BAAOA,MAAM,qBACT,+BACI,4BACI,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIC,MAAO,CAACC,UAAW,UAAWF,MAAM,OAAxC,SACA,wBAAIC,MAAO,CAACC,UAAW,UAAWF,MAAM,OAAxC,YAGR,+BACIF,EAAMK,KAAI,SAACC,GAAD,OACX,4BACI,4BAAKA,EAAKC,SACV,4BAAKD,EAAKE,WACV,wBAAIL,MAAO,CAACC,UAAW,WAAY,QAAME,EAAKG,MAAM,KAAKC,QAAQ,IACjE,wBAAIP,MAAO,CAACC,UAAW,WAAYE,EAAKK,gBCOhDC,EA1BK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACI,yBAAKZ,MAAM,aACP,2CACA,2BAAOA,MAAM,qBACT,+BACI,4BACI,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIC,MAAO,CAACC,UAAW,UAAWF,MAAM,OAAxC,UAGR,+BACIW,EAAMR,KAAI,SAACS,GAAD,OACX,4BACI,4BAAKA,EAAKC,SACV,4BAAKD,EAAKE,WACV,wBAAIb,MAAO,CAACC,UAAW,WAAY,QAAMU,EAAKG,QAAQ,KAAKP,QAAQ,YCuD3EQ,G,uNA7DbC,MAAQ,CACN,MAAS,GACT,MAAS,I,mFAGU,IAAD,OAClBC,MAAM,oDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJA,EAAKC,MAAK,SAAUC,EAAGC,GAAK,OAAOA,EAAEV,QAAUS,EAAET,WACjD,EAAKW,SAAS,CAAEf,MAAOW,OAExBK,MAAMC,QAAQC,KAEfX,MAAM,oDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJA,EAAKC,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAEnB,QAAUoB,EAAEpB,WACjD,EAAKqB,SAAS,CAAE5B,MAAOwB,OAExBK,MAAMC,QAAQC,O,+BAIjB,OACE,6BACE,kBAAC,IAAD,KACE,6BACE,yBAAK9B,MAAM,+CACT,uBAAGA,MAAM,eAAe+B,KAAK,KAA7B,gBACA,4BAAQ/B,MAAM,iBAAiBgC,KAAK,SAASC,cAAY,WACvDC,cAAY,aACZC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC3D,0BAAMrC,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BsC,GAAG,aACvC,wBAAItC,MAAM,sBACR,wBAAIA,MAAM,YACR,kBAAC,IAAD,CAAMA,MAAM,WAAWuC,GAAG,KAA1B,gBAEF,wBAAIvC,MAAM,YACR,kBAAC,IAAD,CAAMA,MAAM,WAAWuC,GAAG,UAA1B,aAKR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,CAAOzC,MAAO0C,KAAKvB,MAAMnB,SAE3B,kBAAC,IAAD,CAAOyC,KAAK,KACV,kBAAC,EAAD,CAAa5B,MAAO6B,KAAKvB,MAAMN,iB,GApD7B8B,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.e19e6d4b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Stock = ({ items }) => {\r\n    return (\r\n        <div class=\"container\">\r\n            <h3>Current Stock</h3>\r\n            <table class=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th style={{textAlign: 'center'}} scope=\"col\">Price</th>\r\n                        <th style={{textAlign: 'center'}} scope=\"col\">Amount</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                   {items.map((item) => (\r\n                   <tr>\r\n                       <td>{item.item_id}</td>\r\n                       <td>{item.item_name}</td>\r\n                       <td style={{textAlign: 'center'}}>{\"£\"+((item.price/100).toFixed(2))}</td>\r\n                       <td style={{textAlign: 'center'}}>{item.amount}</td>\r\n                   </tr>\r\n               ))} \r\n               </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stock;","import React from 'react'\r\n\r\nconst Leaderboard = ({ users }) => {\r\n    return (\r\n        <div class=\"container\">\r\n            <h3>Leaderboard</h3>\r\n            <table class=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th style={{textAlign: 'center'}} scope=\"col\">Cash</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                   {users.map((user) => (\r\n                   <tr>\r\n                       <td>{user.user_id}</td>\r\n                       <td>{user.user_name}</td>\r\n                       <td style={{textAlign: 'center'}}>{\"£\"+((user.balance/100).toFixed(2))}</td>\r\n                   </tr>\r\n               ))} \r\n               </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;","import React, { Component } from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Stock from './components/stock';\r\nimport Leaderboard from './components/leaderboard';\r\nimport 'bootswatch/dist/sandstone/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    \"users\": [],\r\n    \"items\": [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://santa-shares.azurewebsites.net/api/users')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        data.sort(function (a, b) { return b.balance - a.balance; })\r\n        this.setState({ users: data })\r\n      })\r\n      .catch(console.log)\r\n\r\n      fetch('https://santa-shares.azurewebsites.net/api/items')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        data.sort(function (a, b) { return a.item_id - b.item_id; })\r\n        this.setState({ items: data })\r\n      })\r\n      .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <div>\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n              <a class=\"navbar-brand\" href=\"#\">Santa-Shares</a>\r\n              <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                data-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span class=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul class=\"navbar-nav mr-auto\">\r\n                  <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" to=\"/\">Leaderboard</Link>\r\n                  </li>\r\n                  <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" to=\"/stock\">Stock</Link>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </nav>\r\n            <Switch>\r\n              <Route path=\"/stock\">\r\n                <Stock items={this.state.items} />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Leaderboard users={this.state.users} />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}